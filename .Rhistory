geom <- read_sf("hydrofabric.gpkg", "catchments") %>%
st_bbox() %>%
st_as_sfc()
geom <- read_sf("hydrofabric.gpkg", "catchments")
ggplot(geom) +
geom_sf()
ggplot(geom) +
geom_sf(size = .01)
AOI = geom %>%
st_bbox() %>%
st_as_sfc()
files   = get_ned(AOI, res = "1")
files   = get_ned(geom, res = "1")
tmpfile = tempfile(fileext = '.tif')
merge_rasters(files, tmpfile)
plot(read_stars(tmpfile))
unlink(tmpfile)
knit("to_build/02-dem_example.Rmd", "vignettes/02-dem_example.Rmd")
base  = geo_path()
AOI   = AOI::aoi_get(state = "south", county = "all")
plot(AOI$geometry)
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "base",
message = FALSE, warning = FALSE, error = FALSE
)
library(zonal)
library(geogrids)
library(dplyr)
library(zonal)
library(geogrids)
library(dplyr)
base  = geo_path()
AOI   = AOI::aoi_get(state = "south", county = "all")
plot(AOI$geometry)
lai_files = geo_cache_list() %>%
filter(grepl('MOD13A3.006/conus', fullname)) %>%
pull(fullname)
soil_files = geo_cache_list() %>%
filter(grepl('silt-1m-percent.tif', fullname)) %>%
pull(fullname)
geo_cache_list() %>%
filter(grepl('MOD13A3.006/conus', fullname))
lai_files = geo_cache_list() %>%
filter(grepl('MOD13A3.006/mosiacs', fullname)) %>%
pull(fullname)
lai_files
geo_cache_list() %>%
filter(grepl('MOD13A3.006/mosiacs', fullname))
cache = geo_cache_list()
cache
lai_files = cach e%>%
lai_files = cache %>%
filter(grepl('MOD13A3.006/mosiacs', fullname)) %>%
pull(fullname)
lai_files
cache %>%
filter(grepl('MOD13A3.006/mosiacs', fullname))
cache %>%
filter(grepl('MOD13A3.006/mosiacs', fullname))
lai_files = cache %>%
filter(grepl('MOD13A3.006/mosaics', fullname)) %>%
pull(fullname)
lai_files
lai_files = cache %>%
filter(grepl('MOD13A3.006/mosaics', fullname)) %>%
slice(1:36) %>%
pull(fullname)
lai_files
soil_files = cache %>%
filter(grepl('silt-1m-percent.tif', fullname)) %>%
pull(fullname)
make_grid(lai_files[1])
make_grid(soil_files[1])
lai_files = cache %>%
filter(grepl('aridity', fullname)) %>%
slice(1:36) %>%
pull(fullname)
lai_files
lai_files = cache %>%
filter(grepl('ai_normal', fullname)) %>%
slice(1:36) %>%
pull(fullname)
lai_files = cache %>%
filter(grepl('ai_normal', fullname)) %>%
pull(fullname)
ai_nrom = cache %>%
filter(grepl('ai_normal', fullname)) %>%
pull(fullname)
ai_norm = cache %>%
filter(grepl('ai_normal', fullname)) %>%
pull(fullname)
ai_norm
make_grid(ai_norm)
make_grid(soil_files)
sta   = terra::rast(out, ai)
out
out
out   = geogrid_warp(ai_norm, make_grid(soil_files[1]), disk = TRUE)
out
sta   = terra::rast(c(out, soil))
sta   = terra::rast(c(out, soil_files))
sta
system.time({
out   = geogrid_warp(ai_norm, make_grid(soil_files[1]), disk = TRUE)
sta   = terra::rast(c(out, soil_files))
oo    = execute_zonal(sta, AOI, "geoid")
})
head(oo)
w = weighting_grid(sta, AOI, "geoid")
system.time({
oo    = execute_zonal(sta, w = w,)
})
a = merge(AOI, oo)
plot(a['X1.km.monthly.NDVI'], border = FALSE)
a
plot(a[c('V1', 'V2')], border = FALSE)
oo
cache %>%
filter(grepl('silt-1m-percent.tif|sand-1m-percent.tif|clay-1m-percent.tif', fullname))
new = cache %>%
filter(grepl('silt-1m-percent.tif|sand-1m-percent.tif|clay-1m-percent.tif', fullname))
oo    = execute_zonal(c(new$fullname, out), w = w,)
oo
new$fullname
setNames(oo, c("ID", "clay", "sand", "silt", "AI"))
head(oo)
oo=setNames(oo, c("ID", "clay", "sand", "silt", "AI"))
head(oo)
plot(a[c("clay", "sand", "silt", "AI")], border = FALSE)
a = merge(AOI, oo)
a
AOI
oo
oo=setNames(oo, c("geoid", "clay", "sand", "silt", "AI"))
head(oo)
a = merge(AOI, oo)
a
plot(a[c("clay", "sand", "silt", "AI")], border = FALSE)
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knit("to_build/02-dem_example.Rmd", "vignettes/02-dem_example.Rmd")
knit("to_build/03_categorical.Rmd", "vignettes/03_categorical.Rmd")
knit("to_build/03-categorical.Rmd", "vignettes/03-categorical.Rmd")
knit("to_build/03-characteristics.Rmd", "vignettes/03-characteristics.Rmd")
knitr::include_graphics("../workspace/img/snowfrac.png")
knit("to_build/03-characteristics.Rmd", "vignettes/03-characteristics.Rmd")
pkgdown::build_site()
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "base",
message = FALSE, warning = FALSE, error = FALSE
)
library(zonal)
library(geogrids)
library(dplyr)
base  = geo_path()
AOI   = AOI::aoi_get(state = "south", county = "all")
plot(AOI$geometry)
getwd()
library(knitr)
setwd("/Users/mjohnson/github/geogrids/")
files = list.files(".", ".png", full.names = TRUE)
files
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all(".")
# rcompendium::add_dependencies()
# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
devtools::document()
devtools::load_all()
devtools::check(vignettes = TRUE)
pkgdown::build_site()
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "dem-",
message = FALSE, warning = FALSE, error = FALSE
)
# plot data!
plot(read_stars(tmpfile), main = "DEM")
# Identify needed NED tiles
files   = get_ned(geom, res = "1")
# Define location to write merged raster
tmpfile = tempfile(fileext = '.tif')
# Merge NED tiles into tempfile
merge_rasters(files, tmpfile)
# plot data!
plot(read_stars(tmpfile), main = "DEM")
library(knitr)
setwd("/Users/mjohnson/github/geogrids/")
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knit("to_build/02-dem_example.Rmd", "vignettes/02-dem_example.Rmd")
knit("to_build/03-characteristics.Rmd", "vignettes/03-characteristics.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
]
pak::pkg_deps("local::.", dependencies = TRUE)
install.packages('pak')
install.packages('pak')
hy_file
rcompendium::add_dependencies()
devtools::load_all(".")
# LC ---------------------------------------------------------
# Yearly product
product = 'MCD12Q1.006'
dir = file.path(main_dir, product, 'raw')
#---------------------------------------------------------
### Basic paths, AOI, and spatial grid
AOI = AOI::aoi_get(state = "conus")
main_dir = "/Volumes/Transcend/ngen"
gridmet_grid = make_grid(file = "/Volumes/Transcend/ngen/gridmet/elevation.nc")
modis_lc = make_grid(file = '/Volumes/Transcend/ngen/MODIS/MCD12Q1.006/1km/2019-01-01.tif')
# LC ---------------------------------------------------------
# Yearly product
product = 'MCD12Q1.006'
dir = file.path(main_dir, product, 'raw')
fs::dir_create(dir)
downloadMODIS(AOI,
product,
startDate = "2001-01-01",
dir,
base.url = 'https://e4ftl01.cr.usgs.gov/MOTA/')
downloadMODIS
downloadMODIS(AOI,
product,
date = "2001-01-01",
dir)
patterns = getSubsets(list.files(dir, recursive = TRUE, full = TRUE)[1])
patterns
dir
downloadMODIS(AOI,
product,
date = "2001-01-01",
dir)
date = "2001-01-01"
subdir <- NULL
if(is.null(date)){stop("date must be specified")}
if(length(date) == 1){ date = c(date, date) }
date
home_link  = .modis_dir(product)
home_link
if(length(home_link) == 0){stop (product, " not recognized.")}
modis_grid = sf::read_sf('inst/extdata/modis_grid.gpkg')
ints = st_filter(modis_grid, sf::st_transform(AOI, st_crs(modis_grid)))
tiles <-  paste0("h", sprintf("%02d", as.numeric(ints$h)),
"v", sprintf("%02d", as.numeric(ints$v)))
message(length(tiles), " tiles cover this AOI")
dates = read_html(home_link) %>%
html_nodes("a") %>%
html_attr('href') %>%
as.Date(format = "%Y.%m.%d/")
dates
dates = dates[dplyr::between(dates, as.Date(date[1]), as.Date(date[2]))]
dates = dates[!is.na(dates)]
message(length(dates), " date(s) covers this period")
dates
message(length(dates), " date(s) covers this period")
tmpdir = file.path(dir, "MODIS", product, "raw")
tmpdir
dir.create(tmpdir, showWarnings = FALSE)
ts = tibble(fullname = list.files(tmpdir,
ignore.case = TRUE,
recursive = TRUE,
full.names = TRUE))
ts
ts$subdir   = gsub(paste0(tmpdir, "/"), "", dirname(ts$fullname))
ts$basename = basename(ts$fullname)
oo = ts %>%
dplyr::filter(between(as.Date(subdir), as.Date(date[1]), as.Date(date[2]))) %>%
dplyr::filter(grepl(paste(tiles, collapse = "|"), basename)) %>%
dplyr::group_by(subdir) %>%
dplyr::summarise(count = n())
oo
tmpdir
tmpdir
tmpdir = file.path(dir, "MODIS", product, "raw", dates)
dir.create(tmpdir, showWarnings = FALSE)
tmpdir
dir.create(tmpdir, showWarnings = FALSE, recursive = TRUE)
dir
dir   = geo_path()
tmpdir = file.path(dir, "MODIS", product, "raw", dates)
tmpdir
dir.create(tmpdir, showWarnings = FALSE, recursive = TRUE)
ts = tibble(fullname = list.files(tmpdir,
ignore.case = TRUE,
recursive = TRUE,
full.names = TRUE))
ts
ts$subdir   = gsub(paste0(tmpdir, "/"), "", dirname(ts$fullname))
ts
ts$basename = basename(ts$fullname)
oo = ts %>%
dplyr::filter(between(as.Date(subdir), as.Date(date[1]), as.Date(date[2]))) %>%
dplyr::filter(grepl(paste(tiles, collapse = "|"), basename)) %>%
dplyr::group_by(subdir) %>%
dplyr::summarise(count = n())
oo
dates_to_process = dates[!dates %in% as.Date(oo$subdir) | oo$count != length(tiles)]
dates_to_process
dates
tmpdir
ts = tibble(fullname = list.files(tmpdir,
ignore.case = TRUE,
recursive = TRUE,
full.names = TRUE))
ts
gsub(paste0(tmpdir, "/"), "", dirname(ts$fullname))
dirname(ts$fullname)
tmpdir
nrow(ts) == 0
ts
tmpdir
paste0(tmpdir, "/")
dirname(ts$fullname)
dates_to_process
dates
if(nrow(ts) == 0){
dates_to_process = dates
} else {
ts$subdir   = gsub(paste0(tmpdir, "/"), "", dirname(ts$fullname))
ts$basename = basename(ts$fullname)
oo = ts %>%
dplyr::filter(between(as.Date(subdir), as.Date(date[1]), as.Date(date[2]))) %>%
dplyr::filter(grepl(paste(tiles, collapse = "|"), basename)) %>%
dplyr::group_by(subdir) %>%
dplyr::summarise(count = n())
dates_to_process = dates[!dates %in% as.Date(oo$subdir) | oo$count != length(tiles)]
}
need =  dates_to_process[!dir.exists(file.path(tmpdir, dates_to_process))]
need
tmpdir
tmpdir = file.path(dir, "MODIS", product, "raw")
dir.create(tmpdir, showWarnings = FALSE, recursive = TRUE)
ts = tibble(fullname = list.files(tmpdir,
ignore.case = TRUE,
recursive = TRUE,
full.names = TRUE))
ts
ts$subdir   = gsub(paste0(tmpdir, "/"), "", dirname(ts$fullname))
ts$basename = basename(ts$fullname)
oo = ts %>%
dplyr::filter(between(as.Date(subdir), as.Date(date[1]), as.Date(date[2]))) %>%
dplyr::filter(grepl(paste(tiles, collapse = "|"), basename)) %>%
dplyr::group_by(subdir) %>%
dplyr::summarise(count = n())
oo
ts
ts %>%
dplyr::filter(between(as.Date(subdir), as.Date(date[1]), as.Date(date[2])))
oo = ts %>%
dplyr::filter(between(as.Date(subdir), as.Date(date[1]), as.Date(date[2]))) %>%
dplyr::filter(grepl(paste(tiles, collapse = "|"), basename)) %>%
dplyr::group_by(subdir) %>%
dplyr::summarise(count = n())
dates_to_process = dates[!dates %in% as.Date(oo$subdir) | oo$count != length(tiles)]
dates_to_process
need =  dates_to_process[!dir.exists(file.path(tmpdir, dates_to_process))]
need
subdir
date
date
ts %>%
dplyr::filter(between(as.Date(subdir), as.Date(date[1]), as.Date(date[2])))
if(nrow(oo) == 0){
dates_to_process = dates
} else {
dates_to_process = dates[!dates %in% as.Date(oo$subdir) | oo$count != length(tiles)]
}
dates_to_process
tmpdir
need =  dates_to_process[!dir.exists(file.path(tmpdir, dates_to_process))]
need
lapply(need, function(x){dir.create(file.path(tmpdir, x))})
message("Need to download data for ", length(dates_to_process), ' dates' )
if(length(dates_to_process) > 0){
for(i in 1:length(dates_to_process)){
path = file.path(home_link, gsub("-", ".", dates_to_process[i]))
files = read_html(path) %>%
html_nodes("a") %>%
html_attr('href')
f1 = grep(".hdf$", files, value = TRUE)
f2 = grep(paste(tiles, collapse = "|"), f1, value = TRUE)
urls = file.path(path, f2)
tmp = file.path(tmpdir, dates_to_process[i], f2)
message("Downloading: ", path)
lapply(1:length(urls), function(x){
if(!file.exists(tmp[x])){
httr::GET(urls[x],
httr::write_disk(tmp[x], overwrite = TRUE),
httr::progress(),
httr::config(netrc = TRUE, netrc_file = netrc),
httr::set_cookies("LC" = "cookies"))
}
})
}
}
netrc = getNetrcPath()
if(length(dates_to_process) > 0){
for(i in 1:length(dates_to_process)){
path = file.path(home_link, gsub("-", ".", dates_to_process[i]))
files = read_html(path) %>%
html_nodes("a") %>%
html_attr('href')
f1 = grep(".hdf$", files, value = TRUE)
f2 = grep(paste(tiles, collapse = "|"), f1, value = TRUE)
urls = file.path(path, f2)
tmp = file.path(tmpdir, dates_to_process[i], f2)
message("Downloading: ", path)
lapply(1:length(urls), function(x){
if(!file.exists(tmp[x])){
httr::GET(urls[x],
httr::write_disk(tmp[x], overwrite = TRUE),
httr::progress(),
httr::config(netrc = TRUE, netrc_file = netrc),
httr::set_cookies("LC" = "cookies"))
}
})
}
}
patterns = getSubsets(list.files(dir, recursive = TRUE, full = TRUE)[1])
patterns = getSubsets(list.files(dir, recursive = TRUE, full = TRUE)[1])
patterns
list.files(dir, recursive = TRUE, full = TRUE)[1]
dir
dir = file.path(main_dir, product, 'raw')
list.files(dir, recursive = TRUE, full = TRUE)[1]
dir
list.files(dir, recursive = TRUE, full.names =  = TRUE)
list.files(dir, recursive = TRUE, full.names = TRUE)
dir
main_dir
dir = file.path(main_dir,  "MODIS", product, 'raw')
dir
patterns = getSubsets(list.files(dir, recursive = TRUE, full.names = TRUE)[1])
patterns
dir
outDir = file.path(main_dir, product, 'conus')
outDir
## Usings SOIL 1 km grid
mosaicMODIS(dir,
outDir = file.path(main_dir, product, 'conus'),
pattern = patterns[1],
te = c(-2357000, 277000, 2259000, 3173000),
tr = c(1000,1000),
t_srs = '+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs +ellps=clrk66',
method = "near")
patterns[1]
dir
pattern
pattern
outDir = file.path(main_dir, product, 'conus')
pattern = patterns[1]
te = c(-2357000, 277000, 2259000, 3173000)
tr = c(1000,1000)
t_srs = '+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs +ellps=clrk66'
method = "near"
subdir <- dest <- NULL
if(is.null(date)){c("1900-01-01", "2100-01-01")}
if(length(date) == 1){ date = c(date, date) }
if(is.null(grid)){
options = c("-of", of,
"-r", r)
} else {
options = c("-of", of,
"-te", grid$ext,
"-tr", grid$resXY,
"-t_srs", grid$prj,
"-r", r)
}
of = "GTiff"
if(is.null(grid)){
options = c("-of", of,
"-r", r)
} else {
options = c("-of", of,
"-te", grid$ext,
"-tr", grid$resXY,
"-t_srs", grid$prj,
"-r", r)
}
modis_lc
## Usings SOIL 1 km grid
mosaicMODIS(dir = geo_path(),
prefix = "landcover",
product = product,
date = c("2001-01-01"),
pattern = patterns[1],
grid = modis_lc,
r = "near")
## Usings SOIL 1 km grid
mosaicMODIS(dir = geo_path(),
prefix = "landcover",
product = product,
date = c("2019-01-01"),
pattern = patterns[1],
grid = modis_lc,
r = "near")
devtools::document()
devtools::load_all()
