render(
input  = '01_NHD_navigate.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, beta, rpu),
AWS_bucket: 'formulations-dev/hydrofabric/traits',
version = version,
plot = TRUE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
# Move down a level in project
setwd("workspace")
# Load creds and packages
library(rmarkdown)
source("../inst/aws.R") # Personal file containing AWS access
# Move down a level in project
setwd("workspace")
# Load creds and packages
library(rmarkdown)
source("../inst/aws.R") # Personal file containing AWS access
rpu_code   <- '01a'
version    = "beta"
dir = '/Users/mjohnson/github/hydroresolve/releases/'
hy_file = list.files(dir,pattern = "gpkg", full.names = TRUE, recursive = TRUE)
hy_file = grep(rpu_code, grep(version, hy_file, value = TRUE), value = TRUE)
hy_file
## Step 1: NHD-navigate
render(
input  = '01_NHD_navigate.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, beta, rpu),
AWS_bucket: 'formulations-dev/hydrofabric/traits',
version = version,
plot = TRUE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, beta, rpu),
AWS_bucket: 'formulations-dev/hydrofabric/traits',
version = version,
plot = TRUE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, beta, rpu),
AWS_bucket: 'formulations-dev/hydrofabric/traits',
version = version,
plot = TRUE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, beta, rpu_code),
AWS_bucket: 'formulations-dev/hydrofabric/traits',
version = version,
plot = TRUE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
file.path(dir, beta, rpu_code)
rpu_code   <- '01a'
version    = "beta"
dir = '/Users/mjohnson/github/hydroresolve/releases/'
file.path(dir, beta, rpu_code)
dir
beta
version
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, version, rpu_code),
AWS_bucket: 'formulations-dev/hydrofabric/traits',
version = version,
plot = TRUE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, version, rpu_code),
AWS_bucket =  'formulations-dev/hydrofabric/traits',
version = version,
plot = TRUE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
library(geogrids)
devtools::install_local()
fs::file_copy('/Users/mjohnson/github/zonal/to_build/modis_lc.csv',
'..//modis_lc.csv')
modis_mapping = read.csv('..//modis_lc.csv')
years
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, version, rpu_code),
AWS_bucket =  'formulations-dev/hydrofabric/traits',
version = version,
plot = FALSE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
# Move down a level in project
setwd("workspace")
## ------------------------------------------------------
# Load creds and packages
library(rmarkdown)
source("../inst/aws.R") # Personal file containing AWS access
# -------------------------------------------------------------------------
# User Defined Parameters
rpu_code   <- '01a'
version    = "beta"
dir = '/Users/mjohnson/github/hydroresolve/releases/'
hy_file = list.files(dir,pattern = "gpkg", full.names = TRUE, recursive = TRUE)
hy_file = grep(rpu_code, grep(version, hy_file, value = TRUE), value = TRUE)
# GO! ---------------------------------------------------------------------geog
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, version, rpu_code),
AWS_bucket =  'formulations-dev/hydrofabric/traits',
version = version,
plot = FALSE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
hydro_path       = params$hydrofabric_file
data_dir         = params$data_dir
hydrofabric_file = params$hydrofabric_file
library(geogrids)
devtools::install_local('.')
getwd()
setwd(../)
setwd('../')
getwd()
devtools::install_local('.')
## ---------------------------
## Generate LSTM (and other) traits for a hydrofabric
##
## Author: Mike (mikecp11@gmail.com)
##
## ---------------------------
## Notes:
##
## ---------------------------
# Move down a level in project
setwd("workspace")
## ------------------------------------------------------
# Load creds and packages
library(rmarkdown)
source("../inst/aws.R") # Personal file containing AWS access
# -------------------------------------------------------------------------
# User Defined Parameters
rpu_code   <- '01a'
version    = "beta"
dir = '/Users/mjohnson/github/hydroresolve/releases/'
hy_file = list.files(dir,pattern = "gpkg", full.names = TRUE, recursive = TRUE)
hy_file = grep(rpu_code, grep(version, hy_file, value = TRUE), value = TRUE)
# GO! ---------------------------------------------------------------------geog
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, version, rpu_code),
AWS_bucket =  'formulations-dev/hydrofabric/traits',
version = version,
plot = FALSE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
## Step 1: NHD-navigate
render(
input  = 'compute.Rmd',
params = list(
data_dir = "/Volumes/Transcend/ngen",
hydrofabric_file = hy_file,
years =  3,
output_dir = file.path(dir, version, rpu_code),
AWS_bucket =  'formulations-dev/hydrofabric/traits',
version = version,
plot = FALSE),
envir        = new.env(),
output_file  = paste0('temp/traits_', rpu_code, '.html')
)
knitr::include_graphics("img/carbonates.png")
modis_mapping = read.csv('..//modis_lc.csv')
modis_mapping
devtools::document()
devtools::check(vignettes = TRUE)
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check(vignettes = TRUE)
devtools::load_all("~/github/geogrids")
devtools::document()
devtools::load_all("~/github/geogrids")
devtools::load_all("~/github/geogrids")
devtools::check(vignettes = FALSE)
devtools::document()
devtools::load_all()
devtools::check(vignettes = FALSE)
devtools::load_all("~/github/geogrids")
devtools::document()
devtools::document()
devtools::load_all()
devtools::check(vignettes = FALSE)
devtools::load_all("~/github/geogrids")
devtools::document()
devtools::load_all()
rcompendium::add_dependencies()
rcompendium::add_dependencies_badge()
rcompendium::add_r_depend()
devtools::document()
devtools::load_all()
# rcompendium::add_dependencies()
# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
getwd()
setwd("../")
# rcompendium::add_dependencies()
# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all(".")
devtools::load_all()
devtools::document()
devtools::check(vignettes = FALSE)
devtools::check(vignettes = TRUE)
setwd("/Users/mjohnson/github/geogrids/")
library(knitr)
knit("to_build/01_basics.Rmd", "vignettes/01_basics.Rmd")
getwd()
knit("to_build/01_basics.Rmd", "vignettes/01_basics.Rmd")
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knit("to_build/02_dem_example.Rmd", "vignettes/02_dem_example.Rmd")
knit("to_build/02-dem_example.Rmd", "vignettes/02-dem_example.Rmd")
fs::file_copy('/Users/mjohnson/github/hydroresolve/releases/beta/01a/hydrofabric.gpkg', 'to_build/hydrofabric.gpkg')
fs::file_copy('/Users/mjohnson/github/hydroresolve/releases/beta/01a/hydrofabric.gpkg', './to_build/hydrofabric.gpkg')
getwd()
fs::file_copy('/Users/mjohnson/github/hydroresolve/releases/beta/01a/hydrofabric.gpkg', 'hydrofabric.gpkg')
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
hydro_path = '/Users/mjohnson/github/hydroresolve/releases/beta/01a/hydrofabric.gpkg'
geom <- read_sf("hydrofabric", "catchments") %>%
st_bbox() %>%
st_as_sfc()
geom <- read_sf("hydrofabric", "catchments")
geom <- read_sf("hydrofabric.gpkg", "catchments") %>%
st_bbox() %>%
st_as_sfc()
geom <- read_sf("hydrofabric.gpkg", "catchments")
ggplot(geom) +
geom_sf()
ggplot(geom) +
geom_sf(size = .01)
AOI = geom %>%
st_bbox() %>%
st_as_sfc()
files   = get_ned(AOI, res = "1")
files   = get_ned(geom, res = "1")
tmpfile = tempfile(fileext = '.tif')
merge_rasters(files, tmpfile)
plot(read_stars(tmpfile))
unlink(tmpfile)
knit("to_build/02-dem_example.Rmd", "vignettes/02-dem_example.Rmd")
base  = geo_path()
AOI   = AOI::aoi_get(state = "south", county = "all")
plot(AOI$geometry)
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "base",
message = FALSE, warning = FALSE, error = FALSE
)
library(zonal)
library(geogrids)
library(dplyr)
library(zonal)
library(geogrids)
library(dplyr)
base  = geo_path()
AOI   = AOI::aoi_get(state = "south", county = "all")
plot(AOI$geometry)
lai_files = geo_cache_list() %>%
filter(grepl('MOD13A3.006/conus', fullname)) %>%
pull(fullname)
soil_files = geo_cache_list() %>%
filter(grepl('silt-1m-percent.tif', fullname)) %>%
pull(fullname)
geo_cache_list() %>%
filter(grepl('MOD13A3.006/conus', fullname))
lai_files = geo_cache_list() %>%
filter(grepl('MOD13A3.006/mosiacs', fullname)) %>%
pull(fullname)
lai_files
geo_cache_list() %>%
filter(grepl('MOD13A3.006/mosiacs', fullname))
cache = geo_cache_list()
cache
lai_files = cach e%>%
lai_files = cache %>%
filter(grepl('MOD13A3.006/mosiacs', fullname)) %>%
pull(fullname)
lai_files
cache %>%
filter(grepl('MOD13A3.006/mosiacs', fullname))
cache %>%
filter(grepl('MOD13A3.006/mosiacs', fullname))
lai_files = cache %>%
filter(grepl('MOD13A3.006/mosaics', fullname)) %>%
pull(fullname)
lai_files
lai_files = cache %>%
filter(grepl('MOD13A3.006/mosaics', fullname)) %>%
slice(1:36) %>%
pull(fullname)
lai_files
soil_files = cache %>%
filter(grepl('silt-1m-percent.tif', fullname)) %>%
pull(fullname)
make_grid(lai_files[1])
make_grid(soil_files[1])
lai_files = cache %>%
filter(grepl('aridity', fullname)) %>%
slice(1:36) %>%
pull(fullname)
lai_files
lai_files = cache %>%
filter(grepl('ai_normal', fullname)) %>%
slice(1:36) %>%
pull(fullname)
lai_files = cache %>%
filter(grepl('ai_normal', fullname)) %>%
pull(fullname)
ai_nrom = cache %>%
filter(grepl('ai_normal', fullname)) %>%
pull(fullname)
ai_norm = cache %>%
filter(grepl('ai_normal', fullname)) %>%
pull(fullname)
ai_norm
make_grid(ai_norm)
make_grid(soil_files)
sta   = terra::rast(out, ai)
out
out
out   = geogrid_warp(ai_norm, make_grid(soil_files[1]), disk = TRUE)
out
sta   = terra::rast(c(out, soil))
sta   = terra::rast(c(out, soil_files))
sta
system.time({
out   = geogrid_warp(ai_norm, make_grid(soil_files[1]), disk = TRUE)
sta   = terra::rast(c(out, soil_files))
oo    = execute_zonal(sta, AOI, "geoid")
})
head(oo)
w = weighting_grid(sta, AOI, "geoid")
system.time({
oo    = execute_zonal(sta, w = w,)
})
a = merge(AOI, oo)
plot(a['X1.km.monthly.NDVI'], border = FALSE)
a
plot(a[c('V1', 'V2')], border = FALSE)
oo
cache %>%
filter(grepl('silt-1m-percent.tif|sand-1m-percent.tif|clay-1m-percent.tif', fullname))
new = cache %>%
filter(grepl('silt-1m-percent.tif|sand-1m-percent.tif|clay-1m-percent.tif', fullname))
oo    = execute_zonal(c(new$fullname, out), w = w,)
oo
new$fullname
setNames(oo, c("ID", "clay", "sand", "silt", "AI"))
head(oo)
oo=setNames(oo, c("ID", "clay", "sand", "silt", "AI"))
head(oo)
plot(a[c("clay", "sand", "silt", "AI")], border = FALSE)
a = merge(AOI, oo)
a
AOI
oo
oo=setNames(oo, c("geoid", "clay", "sand", "silt", "AI"))
head(oo)
a = merge(AOI, oo)
a
plot(a[c("clay", "sand", "silt", "AI")], border = FALSE)
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knit("to_build/02-dem_example.Rmd", "vignettes/02-dem_example.Rmd")
knit("to_build/03_categorical.Rmd", "vignettes/03_categorical.Rmd")
knit("to_build/03-categorical.Rmd", "vignettes/03-categorical.Rmd")
knit("to_build/03-characteristics.Rmd", "vignettes/03-characteristics.Rmd")
knitr::include_graphics("../workspace/img/snowfrac.png")
knit("to_build/03-characteristics.Rmd", "vignettes/03-characteristics.Rmd")
pkgdown::build_site()
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "base",
message = FALSE, warning = FALSE, error = FALSE
)
library(zonal)
library(geogrids)
library(dplyr)
base  = geo_path()
AOI   = AOI::aoi_get(state = "south", county = "all")
plot(AOI$geometry)
getwd()
library(knitr)
setwd("/Users/mjohnson/github/geogrids/")
files = list.files(".", ".png", full.names = TRUE)
files
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all(".")
# rcompendium::add_dependencies()
# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
devtools::document()
devtools::load_all()
devtools::check(vignettes = TRUE)
pkgdown::build_site()
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "dem-",
message = FALSE, warning = FALSE, error = FALSE
)
# plot data!
plot(read_stars(tmpfile), main = "DEM")
# Identify needed NED tiles
files   = get_ned(geom, res = "1")
# Define location to write merged raster
tmpfile = tempfile(fileext = '.tif')
# Merge NED tiles into tempfile
merge_rasters(files, tmpfile)
# plot data!
plot(read_stars(tmpfile), main = "DEM")
library(knitr)
setwd("/Users/mjohnson/github/geogrids/")
knit("to_build/01-basics.Rmd", "vignettes/01-basics.Rmd")
knit("to_build/02-dem_example.Rmd", "vignettes/02-dem_example.Rmd")
knit("to_build/03-characteristics.Rmd", "vignettes/03-characteristics.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
]
pak::pkg_deps("local::.", dependencies = TRUE)
install.packages('pak')
install.packages('pak')
hy_file
rcompendium::add_dependencies()
